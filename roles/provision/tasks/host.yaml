- name: "Create eni for mgmt"
  ec2_eni:
    region: "{{ ec2_region }}"
    device_index: 0
    subnet_id: "{{ ec2_vpc_subnet_mgmt.subnet.id }}"
    security_groups: "{{ ec2_group.group_id }}"
    private_ip_address: "{{ ec2_instance_interface.mgmt.private_ip_address | default(omit) }}"
    delete_on_termination: true
  register: ec2_eni_mgmt

- name: "Associate EIP to mgmt ENI"
  ec2_eip:
    region: "{{ ec2_region }}"
    device_id: "{{ ec2_eni_mgmt.interface.id }}"
    in_vpc: true
    release_on_disassociation: true
    reuse_existing_ip_allowed: true
  register: ec2_eip_mgmt

- name: "Create eni for inside"
  ec2_eni:
    region: "{{ ec2_region }}"
    device_index: 1
    subnet_id: "{{ ec2_vpc_subnet_inside.subnet.id }}"
    security_groups: "{{ ec2_group.group_id }}"
    private_ip_address: "{{ ec2_instance_interface.inside.private_ip_address | default(omit) }}"
    delete_on_termination: true
  register: ec2_eni_inside

- name: "Create Instance"
  ec2:
    region: "{{ ec2_region }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_instance_image }}"
    key_name: "{{ ec2_instance_key }}"
    network_interfaces:
      - "{{ ec2_eni_mgmt.interface.id }}"
      - "{{ ec2_eni_inside.interface.id }}"
    wait: true
    instance_tags:
      Name: "{{ ec2_instance_name }}"
      Environment: "{{ ec2_vpc_name }}"
      Platform: "{{ ansible_network_os | default('host') }}"
  register: ec2

- name: "debug ec2"
  debug:
    var: ec2
    verbosity: 2

- name: "Add instance to inventory"
  add_host:
    hostname: "{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"


#- name: "Wait for SSH to come up"
#  delegate_to: "{{ item.public_dns_name }}"
#  wait_for_connection:
#    delay: 60
#    timeout: 320
#  with_items: "{{ ec2.instances }}"
